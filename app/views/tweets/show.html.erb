<div class="contents row">
  <div class="content_post" style="background-image: url(<%= @tweet.image %>);">
    <% if user_signed_in? && current_user.id == @tweet.user_id %>
    <div class="more">
      <span><%= image_tag 'arrow_top.png'%></span>
      <ul class="more_list">
        <li>
          <%= link_to '編集', edit_tweet_path(@tweet.id), method: :get%>
        </li>
        <li>
          <%= link_to '削除', tweet_path(@tweet.id), method: :delete %>
        </li>
      </ul>
    </div>
    <% end %>
    <p><%= @tweet.text %></p>
    <span class="name">
      <a href="/users/<%= @tweet.user.id %> ">
        <span>投稿者</span><%= @tweet.user.nickname %>
      </a>
    </span>
  </div>
  <div class="container">
    <% if user_signed_in?%>
      <%= form_with(model: [@tweet, @comment], local: true) do |form| %>
        <%= form.text_area :text, placeholder: "コメントする", rows: "2" %>
        <%= form.submit "SEND" %>
      <% end %>
    <% else %>
      <strong><p>*** コメントの投稿には新規登録/ログインが必要です ***</p></strong>
    <% end %>
    <div class="comments">
      <h4>＜コメント一覧＞</h4>
      <% @comments.each do |comment| %>
        <p>
          <strong><%= link_to comment.user.nickname, "/users/#{comment.user_id}" %>
          <%= comment.text %>
        </p>
      <% end %>
    </div>
  </div>
</div>

<%# N + 1 問題
アソシエーションを利用した場合に限り、「データベースへのアクセス回数が多くなってしまう問題」のこと。
このことにりアプリケーションのパフォーマンス低下につながる。
要するにデータベースとブラウザを行ったり来たりする回数が莫大に増えてしまって
重くなってしまうということ。

includesメソッド
引数に指定された関連モデルを１度のアクセスでまとめて取得できる。
書き方は
モデル名.includes(:紐づくモデル名)
このメソッドによりN + 1問題を解消できる。

<% if user_signed_in? && current_user.id == tweet.user_id>
と記述することで、現在ログインしているユーザーと「ツイートを投稿したユーザーが同じか否かを判定する事ができる。
tweet.user_idとして記述ができる理由は、アソシエーションによって成立しているからできる。
「複数の条件を定義したい」場合は、論理演算子の&&(かつ)を用いる。 %>

<%# @commentsの中身には複数のコメントのレコード情報が入っているので、配列の形をとる。
そのため、ビューに表示させるためにはeachメソッドを使って、一つ一つレコードに分解して(切り分けて)から表示させる。
ユーザーのidはcomment.user_idとパスに記述することで、コメントを投稿したユーザーのidをparamsで扱えるようにしている。 %>